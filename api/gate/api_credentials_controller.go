/*
 * Spinnaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package gate

import (
	_context "context"
	"fmt"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// CredentialsControllerApiService CredentialsControllerApi service
type CredentialsControllerApiService service

// GetAccountUsingGETOpts Optional parameters for the method 'GetAccountUsingGET'
type GetAccountUsingGETOpts struct {
	XRateLimitApp         optional.String
	AccountNonExpired     optional.Bool
	AccountNonLocked      optional.Bool
	AllowedAccounts       optional.Interface
	Authorities0Authority optional.String
	CredentialsNonExpired optional.Bool
	Email                 optional.String
	Enabled               optional.Bool
	FirstName             optional.String
	LastName              optional.String
	Password              optional.String
	Roles                 optional.Interface
	Username              optional.String
}

/*
GetAccountUsingGET Retrieve an account's details
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param account account
 * @param optional nil or *GetAccountUsingGETOpts - Optional Parameters:
 * @param "XRateLimitApp" (optional.String) -  X-RateLimit-App
 * @param "AccountNonExpired" (optional.Bool) -
 * @param "AccountNonLocked" (optional.Bool) -
 * @param "AllowedAccounts" (optional.Interface of []string) -
 * @param "Authorities0Authority" (optional.String) -
 * @param "CredentialsNonExpired" (optional.Bool) -
 * @param "Email" (optional.String) -
 * @param "Enabled" (optional.Bool) -
 * @param "FirstName" (optional.String) -
 * @param "LastName" (optional.String) -
 * @param "Password" (optional.String) -
 * @param "Roles" (optional.Interface of []string) -
 * @param "Username" (optional.String) -
@return AccountDetails
*/
func (a *CredentialsControllerApiService) GetAccountUsingGET(ctx _context.Context, account string, localVarOptionals *GetAccountUsingGETOpts) (AccountDetails, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccountDetails
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials/{account}"
	localVarPath = strings.Replace(localVarPath, "{"+"account"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", account)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.AccountNonExpired.IsSet() {
		localVarQueryParams.Add("accountNonExpired", parameterToString(localVarOptionals.AccountNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNonLocked.IsSet() {
		localVarQueryParams.Add("accountNonLocked", parameterToString(localVarOptionals.AccountNonLocked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowedAccounts.IsSet() {
		t := localVarOptionals.AllowedAccounts.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allowedAccounts", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allowedAccounts", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Authorities0Authority.IsSet() {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(localVarOptionals.Authorities0Authority.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CredentialsNonExpired.IsSet() {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(localVarOptionals.CredentialsNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarQueryParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Enabled.IsSet() {
		localVarQueryParams.Add("enabled", parameterToString(localVarOptionals.Enabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarQueryParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarQueryParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Password.IsSet() {
		localVarQueryParams.Add("password", parameterToString(localVarOptionals.Password.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Roles.IsSet() {
		t := localVarOptionals.Roles.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("roles", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("roles", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Username.IsSet() {
		localVarQueryParams.Add("username", parameterToString(localVarOptionals.Username.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XRateLimitApp.IsSet() {
		localVarHeaderParams["X-RateLimit-App"] = parameterToString(localVarOptionals.XRateLimitApp.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v AccountDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetAccountsUsingGETOpts Optional parameters for the method 'GetAccountsUsingGET'
type GetAccountsUsingGETOpts struct {
	AccountNonExpired     optional.Bool
	AccountNonLocked      optional.Bool
	AllowedAccounts       optional.Interface
	Authorities0Authority optional.String
	CredentialsNonExpired optional.Bool
	Email                 optional.String
	Enabled               optional.Bool
	Expand                optional.Bool
	FirstName             optional.String
	LastName              optional.String
	Password              optional.String
	Roles                 optional.Interface
	Username              optional.String
}

/*
GetAccountsUsingGET Retrieve a list of accounts
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetAccountsUsingGETOpts - Optional Parameters:
 * @param "AccountNonExpired" (optional.Bool) -
 * @param "AccountNonLocked" (optional.Bool) -
 * @param "AllowedAccounts" (optional.Interface of []string) -
 * @param "Authorities0Authority" (optional.String) -
 * @param "CredentialsNonExpired" (optional.Bool) -
 * @param "Email" (optional.String) -
 * @param "Enabled" (optional.Bool) -
 * @param "Expand" (optional.Bool) -  expand
 * @param "FirstName" (optional.String) -
 * @param "LastName" (optional.String) -
 * @param "Password" (optional.String) -
 * @param "Roles" (optional.Interface of []string) -
 * @param "Username" (optional.String) -
@return []Account
*/
func (a *CredentialsControllerApiService) GetAccountsUsingGET(ctx _context.Context, localVarOptionals *GetAccountsUsingGETOpts) ([]Account, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Account
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.AccountNonExpired.IsSet() {
		localVarQueryParams.Add("accountNonExpired", parameterToString(localVarOptionals.AccountNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNonLocked.IsSet() {
		localVarQueryParams.Add("accountNonLocked", parameterToString(localVarOptionals.AccountNonLocked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowedAccounts.IsSet() {
		t := localVarOptionals.AllowedAccounts.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allowedAccounts", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allowedAccounts", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Authorities0Authority.IsSet() {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(localVarOptionals.Authorities0Authority.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CredentialsNonExpired.IsSet() {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(localVarOptionals.CredentialsNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarQueryParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Enabled.IsSet() {
		localVarQueryParams.Add("enabled", parameterToString(localVarOptionals.Enabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("expand", parameterToString(localVarOptionals.Expand.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarQueryParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarQueryParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Password.IsSet() {
		localVarQueryParams.Add("password", parameterToString(localVarOptionals.Password.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Roles.IsSet() {
		t := localVarOptionals.Roles.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("roles", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("roles", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Username.IsSet() {
		localVarQueryParams.Add("username", parameterToString(localVarOptionals.Username.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v []Account
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
