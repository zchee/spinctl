/*
 * Spinnaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package gate

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CredentialsControllerApiService CredentialsControllerApi service
type CredentialsControllerApiService service

type apiGetAccountUsingGETRequest struct {
	ctx                   _context.Context
	apiService            *CredentialsControllerApiService
	account               string
	xRateLimitApp         *string
	accountNonExpired     *bool
	accountNonLocked      *bool
	allowedAccounts       *[]string
	authorities0Authority *string
	credentialsNonExpired *bool
	email                 *string
	enabled               *bool
	firstName             *string
	lastName              *string
	password              *string
	roles                 *[]string
	username              *string
}

func (r apiGetAccountUsingGETRequest) XRateLimitApp(xRateLimitApp string) apiGetAccountUsingGETRequest {
	r.xRateLimitApp = &xRateLimitApp
	return r
}

func (r apiGetAccountUsingGETRequest) AccountNonExpired(accountNonExpired bool) apiGetAccountUsingGETRequest {
	r.accountNonExpired = &accountNonExpired
	return r
}

func (r apiGetAccountUsingGETRequest) AccountNonLocked(accountNonLocked bool) apiGetAccountUsingGETRequest {
	r.accountNonLocked = &accountNonLocked
	return r
}

func (r apiGetAccountUsingGETRequest) AllowedAccounts(allowedAccounts []string) apiGetAccountUsingGETRequest {
	r.allowedAccounts = &allowedAccounts
	return r
}

func (r apiGetAccountUsingGETRequest) Authorities0Authority(authorities0Authority string) apiGetAccountUsingGETRequest {
	r.authorities0Authority = &authorities0Authority
	return r
}

func (r apiGetAccountUsingGETRequest) CredentialsNonExpired(credentialsNonExpired bool) apiGetAccountUsingGETRequest {
	r.credentialsNonExpired = &credentialsNonExpired
	return r
}

func (r apiGetAccountUsingGETRequest) Email(email string) apiGetAccountUsingGETRequest {
	r.email = &email
	return r
}

func (r apiGetAccountUsingGETRequest) Enabled(enabled bool) apiGetAccountUsingGETRequest {
	r.enabled = &enabled
	return r
}

func (r apiGetAccountUsingGETRequest) FirstName(firstName string) apiGetAccountUsingGETRequest {
	r.firstName = &firstName
	return r
}

func (r apiGetAccountUsingGETRequest) LastName(lastName string) apiGetAccountUsingGETRequest {
	r.lastName = &lastName
	return r
}

func (r apiGetAccountUsingGETRequest) Password(password string) apiGetAccountUsingGETRequest {
	r.password = &password
	return r
}

func (r apiGetAccountUsingGETRequest) Roles(roles []string) apiGetAccountUsingGETRequest {
	r.roles = &roles
	return r
}

func (r apiGetAccountUsingGETRequest) Username(username string) apiGetAccountUsingGETRequest {
	r.username = &username
	return r
}

/*
GetAccountUsingGET Retrieve an account's details
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param account account
@return apiGetAccountUsingGETRequest
*/
func (a *CredentialsControllerApiService) GetAccountUsingGET(ctx _context.Context, account string) apiGetAccountUsingGETRequest {
	return apiGetAccountUsingGETRequest{
		apiService: a,
		ctx:        ctx,
		account:    account,
	}
}

/*
Execute executes the request
 @return AccountDetails
*/
func (r apiGetAccountUsingGETRequest) Execute() (AccountDetails, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccountDetails
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "CredentialsControllerApiService.GetAccountUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credentials/{account}"
	localVarPath = strings.Replace(localVarPath, "{"+"account"+"}", _neturl.QueryEscape(parameterToString(r.account, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.accountNonExpired != nil {
		localVarQueryParams.Add("accountNonExpired", parameterToString(*r.accountNonExpired, ""))
	}
	if r.accountNonLocked != nil {
		localVarQueryParams.Add("accountNonLocked", parameterToString(*r.accountNonLocked, ""))
	}
	if r.allowedAccounts != nil {
		t := *r.allowedAccounts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allowedAccounts", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allowedAccounts", parameterToString(t, "multi"))
		}
	}
	if r.authorities0Authority != nil {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(*r.authorities0Authority, ""))
	}
	if r.credentialsNonExpired != nil {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(*r.credentialsNonExpired, ""))
	}
	if r.email != nil {
		localVarQueryParams.Add("email", parameterToString(*r.email, ""))
	}
	if r.enabled != nil {
		localVarQueryParams.Add("enabled", parameterToString(*r.enabled, ""))
	}
	if r.firstName != nil {
		localVarQueryParams.Add("firstName", parameterToString(*r.firstName, ""))
	}
	if r.lastName != nil {
		localVarQueryParams.Add("lastName", parameterToString(*r.lastName, ""))
	}
	if r.password != nil {
		localVarQueryParams.Add("password", parameterToString(*r.password, ""))
	}
	if r.roles != nil {
		t := *r.roles
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("roles", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("roles", parameterToString(t, "multi"))
		}
	}
	if r.username != nil {
		localVarQueryParams.Add("username", parameterToString(*r.username, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRateLimitApp != nil {
		localVarHeaderParams["X-RateLimit-App"] = parameterToString(*r.xRateLimitApp, "")
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v AccountDetails
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type apiGetAccountsUsingGETRequest struct {
	ctx                   _context.Context
	apiService            *CredentialsControllerApiService
	accountNonExpired     *bool
	accountNonLocked      *bool
	allowedAccounts       *[]string
	authorities0Authority *string
	credentialsNonExpired *bool
	email                 *string
	enabled               *bool
	expand                *bool
	firstName             *string
	lastName              *string
	password              *string
	roles                 *[]string
	username              *string
}

func (r apiGetAccountsUsingGETRequest) AccountNonExpired(accountNonExpired bool) apiGetAccountsUsingGETRequest {
	r.accountNonExpired = &accountNonExpired
	return r
}

func (r apiGetAccountsUsingGETRequest) AccountNonLocked(accountNonLocked bool) apiGetAccountsUsingGETRequest {
	r.accountNonLocked = &accountNonLocked
	return r
}

func (r apiGetAccountsUsingGETRequest) AllowedAccounts(allowedAccounts []string) apiGetAccountsUsingGETRequest {
	r.allowedAccounts = &allowedAccounts
	return r
}

func (r apiGetAccountsUsingGETRequest) Authorities0Authority(authorities0Authority string) apiGetAccountsUsingGETRequest {
	r.authorities0Authority = &authorities0Authority
	return r
}

func (r apiGetAccountsUsingGETRequest) CredentialsNonExpired(credentialsNonExpired bool) apiGetAccountsUsingGETRequest {
	r.credentialsNonExpired = &credentialsNonExpired
	return r
}

func (r apiGetAccountsUsingGETRequest) Email(email string) apiGetAccountsUsingGETRequest {
	r.email = &email
	return r
}

func (r apiGetAccountsUsingGETRequest) Enabled(enabled bool) apiGetAccountsUsingGETRequest {
	r.enabled = &enabled
	return r
}

func (r apiGetAccountsUsingGETRequest) Expand(expand bool) apiGetAccountsUsingGETRequest {
	r.expand = &expand
	return r
}

func (r apiGetAccountsUsingGETRequest) FirstName(firstName string) apiGetAccountsUsingGETRequest {
	r.firstName = &firstName
	return r
}

func (r apiGetAccountsUsingGETRequest) LastName(lastName string) apiGetAccountsUsingGETRequest {
	r.lastName = &lastName
	return r
}

func (r apiGetAccountsUsingGETRequest) Password(password string) apiGetAccountsUsingGETRequest {
	r.password = &password
	return r
}

func (r apiGetAccountsUsingGETRequest) Roles(roles []string) apiGetAccountsUsingGETRequest {
	r.roles = &roles
	return r
}

func (r apiGetAccountsUsingGETRequest) Username(username string) apiGetAccountsUsingGETRequest {
	r.username = &username
	return r
}

/*
GetAccountsUsingGET Retrieve a list of accounts
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiGetAccountsUsingGETRequest
*/
func (a *CredentialsControllerApiService) GetAccountsUsingGET(ctx _context.Context) apiGetAccountsUsingGETRequest {
	return apiGetAccountsUsingGETRequest{
		apiService: a,
		ctx:        ctx,
	}
}

/*
Execute executes the request
 @return []Account
*/
func (r apiGetAccountsUsingGETRequest) Execute() ([]Account, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Account
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "CredentialsControllerApiService.GetAccountsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.accountNonExpired != nil {
		localVarQueryParams.Add("accountNonExpired", parameterToString(*r.accountNonExpired, ""))
	}
	if r.accountNonLocked != nil {
		localVarQueryParams.Add("accountNonLocked", parameterToString(*r.accountNonLocked, ""))
	}
	if r.allowedAccounts != nil {
		t := *r.allowedAccounts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allowedAccounts", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allowedAccounts", parameterToString(t, "multi"))
		}
	}
	if r.authorities0Authority != nil {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(*r.authorities0Authority, ""))
	}
	if r.credentialsNonExpired != nil {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(*r.credentialsNonExpired, ""))
	}
	if r.email != nil {
		localVarQueryParams.Add("email", parameterToString(*r.email, ""))
	}
	if r.enabled != nil {
		localVarQueryParams.Add("enabled", parameterToString(*r.enabled, ""))
	}
	if r.expand != nil {
		localVarQueryParams.Add("expand", parameterToString(*r.expand, ""))
	}
	if r.firstName != nil {
		localVarQueryParams.Add("firstName", parameterToString(*r.firstName, ""))
	}
	if r.lastName != nil {
		localVarQueryParams.Add("lastName", parameterToString(*r.lastName, ""))
	}
	if r.password != nil {
		localVarQueryParams.Add("password", parameterToString(*r.password, ""))
	}
	if r.roles != nil {
		t := *r.roles
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("roles", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("roles", parameterToString(t, "multi"))
		}
	}
	if r.username != nil {
		localVarQueryParams.Add("username", parameterToString(*r.username, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v []Account
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
